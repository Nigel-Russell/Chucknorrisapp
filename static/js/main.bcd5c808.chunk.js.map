{"version":3,"sources":["cnpic.png","Quotebox.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quotebox","props","className","Button","onClick","App","fetchJoke","fetch","then","response","json","quote","setState","random","value","state","this","alt","src","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,mC,0KCc5BC,MAXf,YAA6B,IAATC,EAAQ,EAARA,MAChB,OACI,6BACI,wBAAIC,UAAW,YACVD,KCQFE,MAZf,YAA2B,IAATF,EAAQ,EAARA,MAKd,OACI,yBAAKC,UAAW,UACZ,4BAAQE,QAASH,GAAjB,Y,gBC6CGI,E,kDAhDb,aAAe,IAAD,8BACZ,gBAMFC,UAAY,WACVC,MAAM,2CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACC,OAAOF,EAAMG,YARzC,EAAKC,MAAQ,CACXF,OAAQ,IAHE,E,gEAabG,KAAKV,c,+BAGE,IAGAO,EAAWG,KAAKD,MAAhBF,OAEP,OACA,6BACE,yBAAKX,UAAW,SAChB,yBAAKe,IAAI,QAAQC,IAAKC,OAEpB,yBAAKjB,UAAW,UACb,wBAAIA,UAAW,SAAf,sBACD,oFAAyD,6BAAzD,+DAC+D,6BAD/D,4CAE4C,oEAG7C,yBAAKA,UAAU,SACf,kBAAE,EAAF,CAAWD,MAAOY,KAElB,yBAAKX,UAAY,eACjB,kBAAE,EAAF,CAASD,MAASe,KAAKV,aAEvB,6BACA,+E,GAzCUc,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcd5c808.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cnpic.15d22072.png\";","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Quotebox ({props}) {\r\n    return(\r\n        <div>\r\n            <h2 className =\"thequote\">\r\n                {props}\r\n            </h2>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quotebox;","import React from 'react';\r\nimport './App.css'\r\n\r\nfunction Button ({props}) {\r\n\r\n    // const reloadpage = () => {\r\n    //     window.location.reload(false);\r\n    \r\n    return(\r\n        <div className =\"button\">\r\n            <button onClick={props}>Hit Me</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Quotebox from './Quotebox';\r\nimport Button from './Button';\r\nimport image from './cnpic.png';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      random: [],\r\n    }\r\n  }\r\n\r\n  fetchJoke = () => {\r\n    fetch('https://api.chucknorris.io/jokes/random')\r\n    .then(response=>response.json())\r\n    .then(quote=>this.setState({random:quote.value}));\r\n  }\r\n componentDidMount(){\r\n   this.fetchJoke()\r\n  }\r\n\r\n  render(){\r\n\r\n//destructed this.state.random to just { random }\r\n  const { random } = this.state;\r\n\r\n   return(\r\n   <div>\r\n     <div className =\"image\">\r\n     <img alt='cnpic' src={image}></img>\r\n     </div>\r\n       <div className =\"header\">\r\n          <h1 className =\"title\">Chuck Norris Facts</h1>\r\n         <p>Arguably the worlds best quote generater in existance.<br />\r\n            This statement is Chuck Norris approved therefore it's true.<br />\r\n            No more questions. Just fact. Side note: <b>Badass mother f*$@Â£rs rock Pink.</b>\r\n        </p>\r\n      </div>\r\n        <div className=\"quote\">\r\n        < Quotebox props={random} />\r\n        </div>\r\n        <div className = \"buttonclass\">\r\n        < Button props = {this.fetchJoke} />\r\n        </div>\r\n        <div>\r\n        <p>Chuck Norris approves you clicking hit me.</p>\r\n      </div>\r\n    </div>\r\n    );\r\n  };\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}